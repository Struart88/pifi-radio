{"version":3,"sources":["components/playerStatus.jsx","services/httpService.js","services/playerService.js","components/control.jsx","components/playStopControl.jsx","components/playerControls.jsx","components/common/downArrow.jsx","components/player.jsx","components/radios.jsx","services/streamsService.js","components/miniPlayer.jsx","components/drawer.jsx","components/loader.jsx","components/alert.jsx","App.js","serviceWorker.js","index.js"],"names":["PlayerStatus","this","props","status","playing","title","className","Component","axios","interceptors","response","use","error","console","log","Promise","reject","get","post","apiEndpoint","apiUrl","body","method","params","FormData","set","vol_up","http","vol_down","Control","handleClick","e","stopPropagation","onClick","small","background","icon","rest","getClassNames","PlayStopControl","PlayerControls","vol","disabled","vol_disabled","DownArrow","Player","Radios","state","streams","isPlaying","name","onAlert","playRadio","classes","data","setState","Object","keys","filter","map","key","renderList","MiniPlayer","Drawer","open","Loader","role","Alert","App","loading","alert","handleAlert","setTimeout","alertTimeout","setInterval","updateStatus","updateInterval","con_mpd","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6674b937.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PlayerStatus extends Component {\n  render() {\n    const { playing, title } = this.props.status;\n    return (\n      <div className=\"text-center\">\n        <h5 className=\"small\">{playing ? 'PLAYING' : 'STOPPED'}</h5>\n        <h4>{title}</h4>\n      </div>\n    );\n  }\n}\n\nexport default PlayerStatus;\n","import axios from 'axios';\n\naxios.interceptors.response.use(null, error => {\n  console.log(error);\n  // alert\n  return Promise.reject(error);\n});\n\nexport default {\n  get: axios.get,\n  post: axios.post\n};\n","import http from './httpService.js';\nimport { apiUrl } from '../config.json';\n\nconst apiEndpoint = `${apiUrl}/player`;\n\nfunction body(method, params = null) {\n  const body = new FormData();\n  body.set('method', method);\n  if (params) body.set('params', params);\n  return body;\n}\n\nexport function getStatus() {\n  return http.get(apiEndpoint);\n}\n\nexport function play() {\n  return http.post(apiEndpoint, body('play'));\n}\n\nexport function stop() {\n  return http.post(apiEndpoint, body('stop'));\n}\n\nexport function vol_up() {\n  return http.post(apiEndpoint, body('change_vol', '+5'));\n}\n\nexport function vol_down() {\n  return http.post(apiEndpoint, body('change_vol', '-5'));\n}\n\nexport function playRadio(name) {\n  return http.post(apiEndpoint, body('play_radios', name));\n}\n","import React, { Component } from 'react';\n\nclass Control extends Component {\n  handleClick = e => {\n    e.stopPropagation();\n    this.props.onClick();\n  };\n\n  getClassNames() {\n    return (\n      (this.props.small ? 'px-3' : 'py-3 px-4 m-0') +\n      ` btn ${this.props.background || 'btn-dark'}`\n    );\n  }\n\n  render() {\n    const { icon, onClick, ...rest } = this.props;\n    return (\n      <button\n        className={this.getClassNames()}\n        onClick={this.handleClick}\n        {...rest}\n      >\n        <i className={icon}></i>\n      </button>\n    );\n  }\n}\n\nexport default Control;\n","import React, { Component } from 'react';\nimport Control from './control';\nimport { play, stop } from '../services/playerService';\n\nclass PlayStopControl extends Component {\n  render() {\n    const { playing, small } = this.props;\n    return (\n      <Control\n        icon={playing ? 'fas fa-stop' : 'fas fa-play'}\n        onClick={() => {\n          playing ? stop() : play();\n        }}\n        background={playing ? 'btn-danger' : 'btn-secondary'}\n        small={small}\n      />\n    );\n  }\n}\nexport default PlayStopControl;\n","import React, { Component } from 'react';\nimport { vol_up, vol_down } from '../services/playerService';\nimport Control from './control';\nimport PlayStopControl from './playStopControl';\nimport './playerControls.scss';\n\nclass PlayerControls extends Component {\n  vol_disabled() {\n    return this.props.status.vol < 0;\n  }\n\n  render() {\n    return (\n      <div className=\"player-controls\">\n        <div className=\"btn-group\">\n          <Control\n            icon=\"fas fa-volume-down\"\n            disabled={this.vol_disabled()}\n            onClick={vol_down}\n          />\n          <Control\n            icon=\"fas fa-volume-up\"\n            disabled={this.vol_disabled()}\n            onClick={vol_up}\n          />\n          <PlayStopControl playing={this.props.status.playing} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlayerControls;\n","import React from 'react';\nimport './downArrow.scss';\n\nconst DownArrow = () => {\n  return <i className=\"down-arrow fas fa-chevron-down fa-lg pb-4\"></i>;\n};\n\nexport default DownArrow;\n","import React from 'react';\nimport PlayerStatus from './playerStatus';\nimport PlayerControls from './playerControls';\nimport DownArrow from './common/downArrow';\nimport './player.scss';\n\nconst Player = ({ status, onClick }) => {\n  return (\n    <div className=\"player p-4\" onClick={onClick}>\n      <DownArrow />\n      <PlayerStatus status={status} />\n      <PlayerControls status={status} />\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { Component } from 'react';\nimport { playRadio } from '../services/playerService';\nimport { getStreams } from '../services/streamsService';\nimport './radios.scss';\n\nclass Radios extends Component {\n  state = { streams: {} };\n\n  async componentDidMount() {\n    const { data: streams } = await getStreams();\n    this.setState({ streams });\n  }\n\n  isPlaying = name => {\n    return name === this.props.status.title && this.props.status.playing;\n  };\n\n  handleClick = name => {\n    if (this.isPlaying(name)) return;\n    this.props.onAlert('Tunning...', name);\n    playRadio(name);\n  };\n\n  getClassNames = name => {\n    const classes = 'radios__item list-group-item';\n    if (this.isPlaying(name)) return classes + ' active';\n    return classes;\n  };\n\n  renderList() {\n    const { streams } = this.state;\n\n    if (!streams) return <h3>No streams available.</h3>;\n\n    return (\n      <ul className=\"list-group list-group-flush list-group-striped\">\n        {Object.keys(streams)\n          .filter(name => streams[name])\n          .map(name => (\n            <li\n              className={this.getClassNames(name)}\n              key={name}\n              onClick={() => this.handleClick(name)}\n            >\n              {name}\n            </li>\n          ))}\n      </ul>\n    );\n  }\n  render() {\n    return <div className=\"radios\">{this.renderList()}</div>;\n  }\n}\n\nexport default Radios;\n","import http from './httpService';\nimport { apiUrl } from '../config.json';\n\nexport function getStreams() {\n  return http.get(`${apiUrl}/streams`);\n}\n","import React, { Component } from 'react';\nimport PlayStopControl from './playStopControl';\nimport './miniPlayer.scss';\n\nclass MiniPlayer extends Component {\n  render() {\n    return (\n      <div className=\"mini-player p-3\" onClick={this.props.onClick}>\n        <div className=\"row\">\n          <div className=\"col\">\n            <i className=\"fas fa-bars fa-lg my-2 mr-3\" />\n            {this.props.status.title}\n          </div>\n          <div className=\"col-3 text-right\">\n            <PlayStopControl playing={this.props.status.playing} small=\"true\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MiniPlayer;\n","import React, { Component } from 'react';\nimport MiniPlayer from './miniPlayer';\nimport Player from './player';\nimport './drawer.scss';\n\nclass Drawer extends Component {\n  state = { open: false };\n\n  getClassNames() {\n    return (\n      'drawer fixed-bottom bg-dark text-white' +\n      (this.state.open ? ' drawer--open' : '')\n    );\n  }\n\n  render() {\n    const { status } = this.props;\n    return (\n      <div className={this.getClassNames()}>\n        {this.state.open ? (\n          <MiniPlayer\n            status={status}\n            onClick={() => this.setState({ open: true })}\n          />\n        ) : (\n          <Player\n            status={status}\n            onClick={() => this.setState({ open: false })}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Drawer;\n","import React from 'react';\nimport './loader.scss';\n\nconst Loader = () => {\n  return (\n    <div className=\"loader d-flex justify-content-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport './alert.scss';\n\nconst Alert = ({ title, body }) => {\n  let classes = 'alert2';\n  classes += title ? ' alert2--visible' : '';\n\n  return (\n    <div className={classes}>\n      <div className=\"alert__content\">\n        <h3 className=\"alert__title\">{title}</h3>\n        <h5 className=\"alert__text\">{body}</h5>\n      </div>\n    </div>\n  );\n};\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport Player from './components/player';\nimport Radios from './components/radios';\nimport Drawer from './components/drawer';\nimport Loader from './components/loader';\nimport Alert from './components/alert';\nimport { getStatus } from './services/playerService';\nimport { updateInterval, alertTimeout } from './config.json';\nimport './App.css';\n\n// d-none d-md-block\nclass App extends Component {\n  state = { status: {}, loading: true, alert: {} };\n\n  componentDidMount() {\n    setInterval(() => this.updateStatus(), updateInterval);\n  }\n\n  async updateStatus() {\n    const { data: status } = await getStatus();\n    this.setState({ status, loading: false });\n  }\n\n  handleAlert = (title, body) => {\n    const alert = { title, body };\n    this.setState({ alert });\n    setTimeout(() => this.setState({ alert: {} }), alertTimeout);\n  };\n\n  render() {\n    const { loading, status, alert } = this.state;\n    if (loading) return <Loader />;\n    if (!status.con_mpd) return <Alert title=\"Disconnected from MPD\" />;\n\n    return (\n      <React.Fragment>\n        <Alert title={alert.title} body={alert.body} />\n\n        <main className=\"container\">\n          <Radios onAlert={this.handleAlert} status={status} />\n        </main>\n        <Drawer status={status} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}